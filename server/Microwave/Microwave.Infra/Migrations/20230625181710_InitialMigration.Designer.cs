// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microwave.Infra.AppDbContext;

#nullable disable

namespace Microwave.Infra.Migrations
{
    [DbContext(typeof(MicrowaveDbContext))]
    [Migration("20230625181710_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microwave.Domain.Entities.ExceptionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("exception");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("innerexception");

                    b.Property<string>("Stacktrace")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stacktrace");

                    b.HasKey("Id");

                    b.ToTable("exceptionslog");
                });

            modelBuilder.Entity("Microwave.Domain.Entities.MicrowaveConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Food")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("food");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit")
                        .HasColumnName("isstatic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Potency")
                        .HasColumnType("int")
                        .HasColumnName("potency");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<string>("WarmingChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("warmingchar");

                    b.HasKey("Id");

                    b.ToTable("microwave");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46ee2c37-d664-458e-9bc7-d91d14e650f8"),
                            Food = "Pipoca de Microondas",
                            Instructions = "Observar o barulho de estouros do milho, caso houver um intervalo de mais de 10 segundos entre um estouro e outro, interrompa o aquecimento.",
                            IsStatic = true,
                            Name = "Pipoca",
                            Potency = 7,
                            Time = new TimeSpan(0, 0, 3, 0, 0),
                            WarmingChar = "P"
                        },
                        new
                        {
                            Id = new Guid("ce2ff2b6-7944-4d2f-947c-576882e74459"),
                            Food = "Leite",
                            Instructions = "Cuidado com aquecimento de líquidos, o choque térmico aliado ao movimento do recipiente pode causar fervura imediata causando risco de queimaduras.",
                            IsStatic = true,
                            Name = "Leite",
                            Potency = 5,
                            Time = new TimeSpan(0, 0, 5, 0, 0),
                            WarmingChar = "L"
                        },
                        new
                        {
                            Id = new Guid("b1a5048d-5b9b-46d0-abb5-af8f0c4fec0d"),
                            Food = "Carne em pedaço ou fatias",
                            Instructions = "Interrompa o processo na metade e vire o conteúdo com a parte de baixo para cima para o descongelamento uniforme.",
                            IsStatic = true,
                            Name = "Carnes de boi",
                            Potency = 4,
                            Time = new TimeSpan(0, 0, 14, 0, 0),
                            WarmingChar = "C"
                        },
                        new
                        {
                            Id = new Guid("50ae3207-737b-410d-a39f-0c44c41861b9"),
                            Food = "Frango (qualquer corte)",
                            Instructions = "Interrompa o processo na metade e vire o conteúdo com a parte de baixo para cima para o descongelamento uniforme.",
                            IsStatic = true,
                            Name = "Frango",
                            Potency = 7,
                            Time = new TimeSpan(0, 0, 8, 0, 0),
                            WarmingChar = "F"
                        },
                        new
                        {
                            Id = new Guid("e27a01f0-091c-43e8-adb8-a13a5f424f17"),
                            Food = "Feijão congelado",
                            Instructions = "Deixe o recipiente destampado e em casos de plástico, cuidado ao retirar o recipiente pois o mesmo pode perder resistência em altas temperaturas.",
                            IsStatic = true,
                            Name = "Feijão",
                            Potency = 9,
                            Time = new TimeSpan(0, 0, 8, 0, 0),
                            WarmingChar = "Q"
                        });
                });

            modelBuilder.Entity("Microwave.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastname");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("passwordhash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("passwordsalt");

                    b.HasKey("Id");

                    b.ToTable("users");
                });
#pragma warning restore 612, 618
        }
    }
}
